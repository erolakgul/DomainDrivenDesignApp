branch
       master
         * ddd prensibine dayalý bir þekilde application,domain,infrastructure ve presentation katmanlarý 
          boþ hali ile oluþturuldu.

       1-domain
         * DDD domain i içerisinde kullanýlacak temel nesneleri tanýmlayacaðýz
         * BaseEntity class ý base objelerde ortak kullanýcacak olan property leri içeriyor olacak
         * ValueObject class ý value object ler için kullanacaðýmýz temel fonk larý barýndýrýyor olacak
         * IAggregateRoot iþaetleyici olarak kullanýlacak olan interface
         * IRepository db deki iþlemlerin belirtileceði interface
         * IUnitOfWork repository deki iþlemlerin tek elden yönetileceði interface

       1-1-domain-models
         * domain lib altýnda aggregatemodel ler oluþturulacak. örneðin sipariþ için ordermodels klasörü altýnda entityler
        listelenecek
         * order domain i altýnda orderhead,orderitem ve address class larý açýldý. aggregateroot orderhead olacak ve 
        diðer class larýn kontrolü bunun üzerinden gerçekleþtirilecek
        
       2-application
         * application katmanýnda repository klasöürü altýnda, irepository interface ini implemente eden 
       order lara ari bir interface tanýmlanýr
         * infrastructure katmanýnda ise bu sipariþ interface ini kullanan repo bulunur
         * buyer bounded context ile order bounded context in birbiriyle haberleþmesi için domain event lar kullanýlacak,
        yani bir sipariþ oluþturulurken bir kullanýcý henüz oluþturulmamýþ olabilir,sipariþin tamamlanmamasý gerekebilir
        bu yüzden domain event ler ile statü ler tutulacak
         * bunun için de domain katmaný altýna events isimli klasör altýnda OrderStartedEvent tanýmladýk,
        bu class INotification interface ini (mediatr) implemente ediyoruz, bu class altýnda da Orderhead sipariþini
        kullanacaðýmýzý bildiriyoruz. 
         * OrderStartedEvent ini handler edebilmek için bu sefer application katmanýnda eventhandler klasörü açýyoruz
         * OrderStartedEventHandler class ý ile OrderStartedEvent ini handle edeceðimizi bildiriyoruz.
         * OrderStartedEvent ini fýrlatma iþini ise baseentity üzeirnden yapýyoruz.
         * BaseEntity de notification nesnesine, baseentity e eriþebilen herkesin eriþebilmesini istiyoruz çünkü
         * BaseEntity deki AddDomainEvents methodunu artýk aggregateroot olan orderhead entity sinde kullanabiliriz.
         * OrderHead yapýcý methodunda nesne oluþturulma aþamasýnda AddDomainEvents methoduna verileri gönderiyoruz.
         * OrderStartedEventHandler da ise bu tetikleme iþlenir, ve alýnan data kurallara uygun deðilse, yeni bir müþteri 
        oluþturulur ve sipariþin müþterisi olarak devam eder
